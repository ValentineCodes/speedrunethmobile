{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "name": "Snowman__AccessoryNotWorn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Snowman__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Snowman__UnavailableAccessory",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "accessories",
          "type": "address[]"
        }
      ],
      "name": "AccessoriesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "enum DataTypes.AccessoryPosition",
              "name": "position",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct DataTypes.Accessory[]",
          "name": "accessories",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snowmanId",
          "type": "uint256"
        }
      ],
      "name": "AccessoriesRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "accessory",
          "type": "address"
        }
      ],
      "name": "AccessoryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "accessory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "snowmanId",
          "type": "uint256"
        }
      ],
      "name": "AccessoryRemoved",
      "type": "event"
    }
  ],
  "transactionHash": "0x2b7df8e800160ba310aafe0218d64dd82796d33553f26a9230d775715bcdb05d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "374874",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x87710dc7d2ff53195e4a949c74834b7b5d737a9b983d0f8a9cde3dab4875bcd2",
    "transactionHash": "0x2b7df8e800160ba310aafe0218d64dd82796d33553f26a9230d775715bcdb05d",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "374874",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f7c322bb55226d6d888297f97025c99b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Snowman__AccessoryNotWorn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Snowman__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Snowman__UnavailableAccessory\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accessories\",\"type\":\"address[]\"}],\"name\":\"AccessoriesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enum DataTypes.AccessoryPosition\",\"name\":\"position\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.Accessory[]\",\"name\":\"accessories\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snowmanId\",\"type\":\"uint256\"}],\"name\":\"AccessoriesRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessory\",\"type\":\"address\"}],\"name\":\"AccessoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snowmanId\",\"type\":\"uint256\"}],\"name\":\"AccessoryRemoved\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/AccessoryManager.sol\":\"AccessoryManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface Errors {\\n    error Snowman__InvalidMintFee();\\n    error Snowman__NoFeesAvailable();\\n    error Snowman__NotMinted();\\n    error Snowman__NotEnoughEth();\\n    error Snowman__WithdrawalFailed();\\n    error Snowman__ZeroAddress();\\n    error Snowman__InvalidFeeCollector();\\n    error Snowman__CannotWearAccessory();\\n    error Snowman__AccessoryAlreadyWorn();\\n    error Snowman__NotAccessoryOwner();\\n    error Snowman__AcccessoryAlreadyExists();\\n    error Snowman__AccessoryNotWorn();\\n    error Snowman__NotOwner();\\n    error Snowman__UnavailableAccessory();\\n    error Snowman__NoAccessories();\\n    error Snowman__AccessoriesCountMismatch();\\n}\\n\",\"keccak256\":\"0x673d8ee7e7d41386cedd6514a3e5a18e773555dcbc7a3ad28001975859583aaa\",\"license\":\"MIT\"},\"contracts/interfaces/ISnowman.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { DataTypes } from \\\"../libraries/types/DataTypes.sol\\\";\\nimport { IERC721Enumerable } from \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\ninterface ISnowman is IERC721Enumerable {\\n    /**\\n     *\\n     * @notice Emitted when an accessory has been added\\n     * @dev Accessory can only be added by contract owner\\n     * @param accessory Address of accessory\\n     */\\n    event AccessoryAdded(address accessory);\\n\\n    /**\\n     *\\n     * @notice Emitted when multiple accessories have been added\\n     * @dev Accessories can only be added by contract owner\\n     * @param accessories Address of accessories\\n     */\\n    event AccessoriesAdded(address[] accessories);\\n\\n    /**\\n     *\\n     * @notice Emitted when an accessory is removed from a Snowman\\n     * @dev Accessory can only be removed by the Snowman owner\\n     * @param accessory Address of accessory removed\\n     * @param snowmanId Id of Snowman with accessory\\n     */\\n    event AccessoryRemoved(address accessory, uint256 snowmanId);\\n\\n    /**\\n     *\\n     * @notice Emitted when an accessory is removed from a Snowman\\n     * @dev Accessories can only be removed by the Snowman owner\\n     * @param accessories Accessories removed\\n     * @param snowmanId Id of Snowman with accessories\\n     */\\n    event AccessoriesRemoved(DataTypes.Accessory[] accessories, uint256 snowmanId);\\n\\n    /**\\n     *\\n     * @notice Emitted when fees are withdrawn\\n     * @param amount Amount of fees withdrawn\\n     */\\n    event FeesWithdrawn(uint256 amount);\\n\\n    /**\\n     *\\n     * @notice Mints one snowman with dynamic attributes for 0.02 ETH\\n     */\\n    function mint() external payable returns (uint256);\\n\\n    /**\\n     *\\n     * @notice Adds an accessory to Snowman for composition by Snowman owners\\n     * @dev Can only be added by contract owner\\n     * @param accessory Address of accessory\\n     * @param position Determines which position(Foreground or Background) to place the accessory\\n     */\\n    function addAccessory(address accessory, DataTypes.AccessoryPosition position) external;\\n\\n    /**\\n     *\\n     * @notice Removes an accessory from a Snowman\\n     * @dev Can only be removed by the Snowman owner\\n     * @param accessory Address of accessory\\n     * @param snowmanId Id of Snowman to remove accessory from\\n     */\\n    function removeAccessory(address accessory, uint256 snowmanId) external;\\n\\n    /**\\n     *\\n     * @notice Removes all accessories from a Snowman\\n     * @dev Can only be removed by the Snowman owner\\n     * @param snowmanId Id of snowman to remove all accessories from\\n     */\\n    function removeAllAccessories(uint256 snowmanId) external;\\n\\n    /**\\n     * @notice Withdraws mint fees to fee collector's account\\n     * @dev Anyone can call this function\\n     */\\n    function withdrawFees() external;\\n\\n    /**\\n     *\\n     * @notice Returns `true` if an accessory has been added to a Snowman and `false` otherwise\\n     * @param accessory Address of accessory\\n     * @param snowmanId Id of Snowman to check\\n     */\\n    function hasAccessory(address accessory, uint256 snowmanId) external view returns (bool);\\n\\n    /**\\n     *\\n     * @notice Returns the id of accessory added to a snowman\\n     * @param accessory Address of accessory\\n     * @param snowmanId Id of Snowman\\n     */\\n    function accessoryId(address accessory, uint256 snowmanId) external view returns (uint256);\\n\\n    /**\\n     *\\n     * @notice Returns the token URI of Snowman\\n     * @param tokenId Id of Snowman\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /**\\n     *\\n     * @notice Returns the SVG image of Snowman\\n     * @param tokenId Id of Snowman\\n     */\\n    function renderTokenById(uint256 tokenId) external view returns (string memory);\\n\\n    /**\\n     *\\n     * @notice Sets a new mint fee collector\\n     * @param newFeeCollector Address of new fee collector\\n     */\\n    function setFeeCollector(address newFeeCollector) external;\\n\\n    /**\\n     *\\n     * @notice Retrieves the current mint fee collector\\n     */\\n    function getFeeCollector() external view returns (address);\\n\\n    /**\\n     *\\n     * @notice Retrieves all accessories\\n     */\\n    function getAccessories() external view returns (DataTypes.Accessory[] memory);\\n\\n    /**\\n     *\\n     * @notice Returns `true` if accessory is available for composition and `false` otherwise\\n     * @dev The contract owner determines if accessory is available or not\\n     * @param accessory Address of accessory\\n     */\\n    function isAccessoryAvailable(address accessory) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6633ca2e313aef06728b406fbb1546e5168f1bb454f110ddc84e75705dd4150d\",\"license\":\"MIT\"},\"contracts/libraries/logic/AccessoryManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { DataTypes } from \\\"../types/DataTypes.sol\\\";\\n\\nimport { ISnowman } from \\\"../../interfaces/ISnowman.sol\\\";\\nimport { Errors } from \\\"../../interfaces/Errors.sol\\\";\\n\\nabstract contract Accessory {\\n    function renderTokenById(uint256 id) external view virtual returns (string memory);\\n\\n    function transferFrom(address from, address to, uint256 id) external virtual;\\n}\\n\\nlibrary AccessoryManager {\\n    event AccessoryAdded(address accessory);\\n    event AccessoriesAdded(address[] accessories);\\n    event AccessoryRemoved(address accessory, uint256 snowmanId);\\n    event AccessoriesRemoved(DataTypes.Accessory[] accessories, uint256 snowmanId);\\n\\n    function addAccessory(\\n        mapping(address => bool) storage s_accessoriesAvailable,\\n        DataTypes.Accessory[] storage s_accessories,\\n        address accessory,\\n        DataTypes.AccessoryPosition position\\n    ) internal {\\n        if (s_accessoriesAvailable[accessory]) revert Errors.Snowman__AcccessoryAlreadyExists();\\n\\n        s_accessoriesAvailable[accessory] = true;\\n        s_accessories.push(DataTypes.Accessory(accessory, position));\\n\\n        emit AccessoryAdded(accessory);\\n    }\\n\\n    function addAccessories(\\n        mapping(address => bool) storage s_accessoriesAvailable,\\n        DataTypes.Accessory[] storage s_accessories,\\n        address[] calldata accessories,\\n        DataTypes.AccessoryPosition[] calldata positions\\n    ) internal {\\n        uint256 totalAccessories = accessories.length;\\n        uint256 totalPositions = positions.length;\\n\\n        if (totalAccessories == 0) revert Errors.Snowman__NoAccessories();\\n        if (totalAccessories != totalPositions) revert Errors.Snowman__AccessoriesCountMismatch();\\n\\n        for (uint256 i = 0; i < totalAccessories; i++) {\\n            addAccessory(s_accessoriesAvailable, s_accessories, accessories[i], positions[i]);\\n        }\\n\\n        emit AccessoriesAdded(accessories);\\n    }\\n\\n    function removeAccessory(\\n        mapping(address => bool) storage s_accessoriesAvailable,\\n        mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n        address accessory,\\n        uint256 snowmanId\\n    ) public {\\n        if (ISnowman(address(this)).ownerOf(snowmanId) != msg.sender) revert Errors.Snowman__NotOwner();\\n        if (!hasAccessory(s_accessoriesAvailable, s_accessoriesById, accessory, snowmanId))\\n            revert Errors.Snowman__AccessoryNotWorn();\\n\\n        _removeAccessory(s_accessoriesById, accessory, snowmanId);\\n\\n        emit AccessoryRemoved(accessory, snowmanId);\\n    }\\n\\n    function removeAllAccessories(\\n        DataTypes.Accessory[] calldata accessories,\\n        mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n        uint256 snowmanId\\n    ) public {\\n        if (msg.sender != ISnowman(address(this)).ownerOf(snowmanId)) revert Errors.Snowman__NotOwner();\\n\\n        uint256 totalAccessories = accessories.length;\\n        // remove all accessories from snowman\\n        for (uint i = 0; i < totalAccessories; i++) {\\n            if (s_accessoriesById[accessories[i]._address][snowmanId] > 0) {\\n                _removeAccessory(s_accessoriesById, accessories[i]._address, snowmanId);\\n            }\\n        }\\n\\n        emit AccessoriesRemoved(accessories, snowmanId);\\n    }\\n\\n    function _removeAccessory(\\n        mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n        address accessory,\\n        uint256 snowmanId\\n    ) internal {\\n        Accessory(accessory).transferFrom(\\n            address(this),\\n            ISnowman(address(this)).ownerOf(snowmanId),\\n            s_accessoriesById[accessory][snowmanId]\\n        );\\n\\n        s_accessoriesById[accessory][snowmanId] = 0;\\n    }\\n\\n    function hasAccessory(\\n        mapping(address => bool) storage s_accessoriesAvailable,\\n        mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n        address accessory,\\n        uint256 snowmanId\\n    ) public view returns (bool) {\\n        if (!s_accessoriesAvailable[accessory]) revert Errors.Snowman__UnavailableAccessory();\\n\\n        return (s_accessoriesById[accessory][snowmanId] != 0);\\n    }\\n\\n    function accessoryId(\\n        mapping(address => bool) storage s_accessoriesAvailable,\\n        mapping(address => mapping(uint256 => uint256)) storage s_accessoriesById,\\n        address accessory,\\n        uint256 snowmanId\\n    ) public view returns (uint256) {\\n        if (!s_accessoriesAvailable[accessory]) revert Errors.Snowman__UnavailableAccessory();\\n\\n        return s_accessoriesById[accessory][snowmanId];\\n    }\\n}\\n\",\"keccak256\":\"0x9aefbf77efc272fa8b7246bb7207d0a9e2e902f8522723b6b0ec14322d01758c\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary DataTypes {\\n    enum AccessoryPosition {\\n        Foreground,\\n        Background\\n    }\\n\\n    struct Accessory {\\n        address _address;\\n        AccessoryPosition position;\\n    }\\n\\n    struct Snowman {\\n        int256 eyeOffsetX;\\n        int256 eyeOffsetY;\\n        string cloudColor;\\n        string buttonColor;\\n        int256 snowAnimOffsetX;\\n    }\\n\\n    struct Hat {\\n        string color;\\n    }\\n\\n    struct Scarf {\\n        string color;\\n    }\\n\\n    struct Belt {\\n        string color;\\n    }\\n}\\n\",\"keccak256\":\"0x11e380696413d78a10393614f32c19f4369f84a3fe0224dc21ac486df6635b9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234601b576105d290816100218239308160070152f35b600080fdfe6080604052307f000000000000000000000000000000000000000000000000000000000000000014600436101561003557600080fd5b60003560e01c80638bb7f7c614610348578063c3b5cb4e14610327578063c6ebe1a3146102545763efa987291461006b57600080fd5b6101a55760603660031901126101a55760043567ffffffffffffffff81116101a557366023820112156101a557806004013567ffffffffffffffff81116101a5576024820191602436918360061b0101116101a55760243591604435926040516331a9108f60e11b8152846004820152602081602481305afa90811561024857600091610219575b506001600160a01b031633036102085760005b8381106101aa57505060405191806040840160408552526060830191906000905b80821061015d577f7d0eb853e07ab2fb5eb178a43b1fdd8178a2dfd823ab86e5443d9d9d1f20790b8580868960208301520390a1005b919290919083356001600160a01b03811681036101a5576001600160a01b0316815260208401359060028210156101a557604080916001936020820152019401920190610127565b600080fd5b8060406101c26101bd6001948888610474565b61049a565b600090848060a01b031681528460205220866000526020526040600020546101eb575b01610106565b610203866101fd6101bd848989610474565b856104ae565b6101e5565b6359bc8af160e01b60005260046000fd5b61023b915060203d602011610241575b610233818361041d565b810190610455565b386100f3565b503d610229565b6040513d6000823e3d90fd5b506101a557610262366103aa565b926040516331a9108f60e11b8152846004820152602081602481305afa90811561024857600091610308575b50336001600160a01b0390911603610208578382846102ac936103d8565b156102f757826102e07f9517d54ef4f3dd671db94f2d957775bbe942fe549a8b9d3eb24e333629fc81c694836040956104ae565b82516001600160a01b0390921682526020820152a1005b63057d474760e51b60005260046000fd5b610321915060203d60201161024157610233818361041d565b3861028e565b602061033e610335366103aa565b929190916103d8565b6040519015158152f35b610351366103aa565b9260018060a01b03821660005260205260ff60406000205416156103995760018060a01b03166000526020526040600020906000526020526020604060002054604051908152f35b6394cd5abb60e01b60005260046000fd5b60809060031901126101a55760043590602435906044356001600160a01b03811681036101a5579060643590565b91909160018060a01b03821660005260205260ff60406000205416156103995760018060a01b0316600052602052604060002090600052602052604060002054151590565b90601f8019910116810190811067ffffffffffffffff82111761043f57604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126101a557516001600160a01b03811681036101a55790565b91908110156104845760061b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036101a55790565b6040516331a9108f60e11b815260048101849052600093926001600160a01b031690602081602481305afa90811561056e57859161057d575b5081855282602052604085208486526020526040852054823b15610579576040516323b872dd60e01b81523060048201526001600160a01b0390921660248301526044820152848160648183865af1801561056e5761055a575b5060005260205260406000209082526020526040812055565b846105679195929561041d565b9238610541565b6040513d87823e3d90fd5b8580fd5b610596915060203d60201161024157610233818361041d565b386104e756fea2646970667358221220dcaf2c4a89f826263e1b1376b1c84f05ba1deafde5dd75bb4b000e5bfa4666f464736f6c634300081c0033",
  "deployedBytecode": "0x6080604052307f000000000000000000000000000000000000000000000000000000000000000014600436101561003557600080fd5b60003560e01c80638bb7f7c614610348578063c3b5cb4e14610327578063c6ebe1a3146102545763efa987291461006b57600080fd5b6101a55760603660031901126101a55760043567ffffffffffffffff81116101a557366023820112156101a557806004013567ffffffffffffffff81116101a5576024820191602436918360061b0101116101a55760243591604435926040516331a9108f60e11b8152846004820152602081602481305afa90811561024857600091610219575b506001600160a01b031633036102085760005b8381106101aa57505060405191806040840160408552526060830191906000905b80821061015d577f7d0eb853e07ab2fb5eb178a43b1fdd8178a2dfd823ab86e5443d9d9d1f20790b8580868960208301520390a1005b919290919083356001600160a01b03811681036101a5576001600160a01b0316815260208401359060028210156101a557604080916001936020820152019401920190610127565b600080fd5b8060406101c26101bd6001948888610474565b61049a565b600090848060a01b031681528460205220866000526020526040600020546101eb575b01610106565b610203866101fd6101bd848989610474565b856104ae565b6101e5565b6359bc8af160e01b60005260046000fd5b61023b915060203d602011610241575b610233818361041d565b810190610455565b386100f3565b503d610229565b6040513d6000823e3d90fd5b506101a557610262366103aa565b926040516331a9108f60e11b8152846004820152602081602481305afa90811561024857600091610308575b50336001600160a01b0390911603610208578382846102ac936103d8565b156102f757826102e07f9517d54ef4f3dd671db94f2d957775bbe942fe549a8b9d3eb24e333629fc81c694836040956104ae565b82516001600160a01b0390921682526020820152a1005b63057d474760e51b60005260046000fd5b610321915060203d60201161024157610233818361041d565b3861028e565b602061033e610335366103aa565b929190916103d8565b6040519015158152f35b610351366103aa565b9260018060a01b03821660005260205260ff60406000205416156103995760018060a01b03166000526020526040600020906000526020526020604060002054604051908152f35b6394cd5abb60e01b60005260046000fd5b60809060031901126101a55760043590602435906044356001600160a01b03811681036101a5579060643590565b91909160018060a01b03821660005260205260ff60406000205416156103995760018060a01b0316600052602052604060002090600052602052604060002054151590565b90601f8019910116810190811067ffffffffffffffff82111761043f57604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126101a557516001600160a01b03811681036101a55790565b91908110156104845760061b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036101a55790565b6040516331a9108f60e11b815260048101849052600093926001600160a01b031690602081602481305afa90811561056e57859161057d575b5081855282602052604085208486526020526040852054823b15610579576040516323b872dd60e01b81523060048201526001600160a01b0390921660248301526044820152848160648183865af1801561056e5761055a575b5060005260205260406000209082526020526040812055565b846105679195929561041d565b9238610541565b6040513d87823e3d90fd5b8580fd5b610596915060203d60201161024157610233818361041d565b386104e756fea2646970667358221220dcaf2c4a89f826263e1b1376b1c84f05ba1deafde5dd75bb4b000e5bfa4666f464736f6c634300081c0033",
  "libraries": {
    "TokenURIGen": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}