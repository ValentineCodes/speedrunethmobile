{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Belt",
          "name": "belt",
          "type": "tuple"
        }
      ],
      "name": "renderTokenById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Belt",
          "name": "belt",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x25edbe2a5bd2bf49d0198dd61e2d76c89749ed28b62bed9ed9ae39ac9d64c493",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "560399",
    "logsBloom": "0x
    "blockHash": "0x6e54257d0fed16082bb198ec1e4e6cdc5c621e3df42bb339bbe4954056eac2b6",
    "transactionHash": "0x25edbe2a5bd2bf49d0198dd61e2d76c89749ed28b62bed9ed9ae39ac9d64c493",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "560399",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f7c322bb55226d6d888297f97025c99b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Belt\",\"name\":\"belt\",\"type\":\"tuple\"}],\"name\":\"renderTokenById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Belt\",\"name\":\"belt\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/metadata/BeltMetadata.sol\":\"BeltMetadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/dependencies/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x97b3d89feb2f92d698946f1dcbaf3313f14a8f4f0444c68513204b980cf7f5fe\",\"license\":\"MIT\"},\"contracts/libraries/logic/metadata/BeltMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { Strings } from \\\"../../../dependencies/Strings.sol\\\";\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\n\\nimport { DataTypes } from \\\"../../types/DataTypes.sol\\\";\\nimport { TokenURIGen } from \\\"../../utils/TokenURIGen.sol\\\";\\nimport { TypeCast } from \\\"../../utils/TypeCast.sol\\\";\\n\\nlibrary BeltMetadata {\\n    using Strings for uint256;\\n\\n    function tokenURI(DataTypes.Belt calldata belt, uint256 tokenId) external pure returns (string memory) {\\n        string memory name = string(abi.encodePacked(\\\"Belt#\\\", tokenId.toString()));\\n        string memory description = string(abi.encodePacked(\\\"This is a belt colored #\\\", belt.color));\\n        string memory image = Base64.encode(bytes(generateSVG(belt)));\\n\\n        return TokenURIGen.generateSVGTokenURI(name, description, image);\\n    }\\n\\n    function renderTokenById(DataTypes.Belt calldata belt) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<path d=\\\"M659.486 768.674C712.328 793.762 877.834 783.727 916.718 768.674C955.602 753.622 916.718 809.818 916.718 809.818C821.372 840.676 765.505 843.417 659.486 809.818C659.486 809.818 606.643 743.587 659.486 768.674Z\\\" fill=\\\"',\\n                    belt.color,\\n                    '\\\" />'\\n                )\\n            );\\n    }\\n\\n    function generateSVG(DataTypes.Belt calldata belt) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 1453 1274\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                    renderTokenById(belt),\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x95f34bdffd7f99f48bd06b0e9ed3962fb3b5666c7cd5cccbff047704979aea95\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary DataTypes {\\n    enum AccessoryPosition {\\n        Foreground,\\n        Background\\n    }\\n\\n    struct Accessory {\\n        address _address;\\n        AccessoryPosition position;\\n    }\\n\\n    struct Snowman {\\n        int256 eyeOffsetX;\\n        int256 eyeOffsetY;\\n        string cloudColor;\\n        string buttonColor;\\n        int256 snowAnimOffsetX;\\n    }\\n\\n    struct Hat {\\n        string color;\\n    }\\n\\n    struct Scarf {\\n        string color;\\n    }\\n\\n    struct Belt {\\n        string color;\\n    }\\n}\\n\",\"keccak256\":\"0x11e380696413d78a10393614f32c19f4369f84a3fe0224dc21ac486df6635b9a\",\"license\":\"MIT\"},\"contracts/libraries/utils/TokenURIGen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\n\\nlibrary TokenURIGen {\\n    function generateSVGTokenURI(\\n        string calldata name,\\n        string calldata description,\\n        string calldata image\\n    ) external pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\": \\\"',\\n                                name,\\n                                '\\\", \\\"description\\\": \\\"',\\n                                description,\\n                                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                                image,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateSVGTokenURI(\\n        string calldata name,\\n        string calldata description,\\n        string calldata image,\\n        string calldata attributes\\n    ) external pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\": \\\"',\\n                                name,\\n                                '\\\", \\\"description\\\": \\\"',\\n                                description,\\n                                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                                image,\\n                                '\\\", \\\"attributes\\\": ',\\n                                attributes,\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateSVGTokenURI(\\n        string calldata name,\\n        string calldata description,\\n        string calldata external_url,\\n        string calldata image,\\n        string calldata attributes\\n    ) external pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\": \\\"',\\n                                name,\\n                                '\\\", \\\"description\\\": \\\"',\\n                                description,\\n                                '\\\", \\\"external_url\\\": \\\"',\\n                                external_url,\\n                                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                                image,\\n                                '\\\", \\\"attributes\\\": ',\\n                                attributes,\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc335553d0ea2887bb676b74da29818c333c9cec3b444e43a05a09633029dfb2d\",\"license\":\"MIT\"},\"contracts/libraries/utils/TypeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nerror TypeCast__toUint256_OutOfBounds();\\n\\nlibrary TypeCast {\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function toColor(bytes3 value) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(6);\\n        for (uint256 i = 0; i < 3; i++) {\\n            buffer[i * 2 + 1] = ALPHABET[uint8(value[i]) & 0xf];\\n            buffer[i * 2] = ALPHABET[uint8(value[i] >> 4) & 0xf];\\n        }\\n        return string(buffer);\\n    }\\n\\n    function toUint256(bytes memory _bytes) internal pure returns (uint256) {\\n        if (_bytes.length < 32) revert TypeCast__toUint256_OutOfBounds();\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(_bytes, 0x20))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x782969af864b7592806bb9687702d7fcd64350dcd943e12a464a9b05c7293a3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523460195761092b908161001f823930815050f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806344813cca1461018c5763d50788501461003257600080fd5b60403660031901126101875760043567ffffffffffffffff81116101875760006100fa6101046100ff61006c6100989536906004016101cf565b6100a661007a60243561052f565b6040516442656c742360d81b60208201529788916025830190610413565b03601f198101885287610290565b6100b08180610239565b6040517f5468697320697320612062656c7420636f6c6f726564202300000000000000006020820152959186916100ec9190603884019161026c565b03601f198101865285610290565b610687565b610801565b926101236040519485938493636e14931f60e11b8552600485016104a5565b0381735FbDB2315678afecb367f032d93F642f64180aa35af480156101825761015b9160009161015f575b5060405191829182610225565b0390f35b61017c91503d806000833e6101748183610290565b810190610446565b3861014e565b6104dc565b600080fd5b60203660031901126101875760043567ffffffffffffffff8111610187576101c36101be61015b9236906004016101cf565b6102b7565b60405191829182610225565b908160209103126101875790565b60005b8381106101f05750506000910152565b81810151838201526020016101e0565b90602091610219815180928185528580860191016101dd565b601f01601f1916010190565b906020610236928181520190610200565b90565b903590601e1981360301821215610187570180359067ffffffffffffffff82116101875760200191813603831361018757565b908092918237016000815290565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176102b257604052565b61027a565b6102c46102369180610239565b9190610405610102846040519586947f3c7061746820643d224d3635392e343836203736382e363734433731322e333260208701527f38203739332e373632203837372e383334203738332e373237203931362e373160408701527f38203736382e363734433935352e363032203735332e363232203931362e373160608701527f38203830392e383138203931362e373138203830392e383138433832312e333760808701527f32203834302e363736203736352e353035203834332e343137203635392e343860a08701527f36203830392e383138433635392e343836203830392e383138203630362e363460c08701527f33203734332e353837203635392e343836203736382e3637345a222066696c6c60e0870152611e9160f11b61010087015283860137631110179f60e11b9084019190910190815260040190565b03601f198101835282610290565b90610426602092828151948592016101dd565b0190565b67ffffffffffffffff81116102b257601f01601f191660200190565b6020818303126101875780519067ffffffffffffffff8211610187570181601f820112156101875780516104798161042a565b926104876040519485610290565b818452602082840101116101875761023691602080850191016101dd565b916104ce906104c06102369593606086526060860190610200565b908482036020860152610200565b916040818403910152610200565b6040513d6000823e3d90fd5b604051906104f7602083610290565b60008252565b906105078261042a565b6105146040519182610290565b8281528092610525601f199161042a565b0190602036910137565b8060009172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610664575b806d04ee2d6d415b85acef8100000000600a921015610648575b662386f26fc10000811015610633575b6305f5e100811015610621575b612710811015610611575b6064811015610602575b10156105f7575b6105e260216105b6600185016104fd565b938401015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353600a900490565b80156105f2576105e290916105bb565b505090565b6001909101906105a5565b6002906064900493019261059e565b6004906127109004930192610594565b6008906305f5e1009004930192610589565b601090662386f26fc10000900493019261057c565b6020906d04ee2d6d415b85acef8100000000900493019261056c565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610552565b610690906102b7565b6102366006608760405180947f3c7376672077696474683d223130302522206865696768743d2231303025222060208301527f76696577426f783d2230203020313435332031323734222066696c6c3d226e6f60408301527f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3230306060830152661817b9bb33911f60c91b608083015261073181518092602086860191016101dd565b8101651e17b9bb339f60d11b838201520301601919810184520182610290565b60405190610760606083610290565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b634e487b7160e01b600052601160045260246000fd5b90600282018092116107d657565b6107b2565b90602082018092116107d657565b600281901b91906001600160fe1b038116036107d657565b8051156108ec57610810610751565b61082c61082761082084516107c8565b6003900490565b6107e9565b9161083e610839846107db565b6104fd565b9283528091815182019060208501935b8281106108905750505060039051068060011461087f57600214610870575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b60036004919592939501916001603f845182828260121c168801015160f81b8452828282600c1c168801015160f81b8385015282828260061c168801015160f81b6002850152168501015160f81b60038201520193919061084e565b506102366104e856fea264697066735822122081467eb545e587267e2914bc20cab7237a0d98df92d29420c70ad926999eeeee64736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806344813cca1461018c5763d50788501461003257600080fd5b60403660031901126101875760043567ffffffffffffffff81116101875760006100fa6101046100ff61006c6100989536906004016101cf565b6100a661007a60243561052f565b6040516442656c742360d81b60208201529788916025830190610413565b03601f198101885287610290565b6100b08180610239565b6040517f5468697320697320612062656c7420636f6c6f726564202300000000000000006020820152959186916100ec9190603884019161026c565b03601f198101865285610290565b610687565b610801565b926101236040519485938493636e14931f60e11b8552600485016104a5565b038173__$630b07a2e356e58e1839af623d98555940$__5af480156101825761015b9160009161015f575b5060405191829182610225565b0390f35b61017c91503d806000833e6101748183610290565b810190610446565b3861014e565b6104dc565b600080fd5b60203660031901126101875760043567ffffffffffffffff8111610187576101c36101be61015b9236906004016101cf565b6102b7565b60405191829182610225565b908160209103126101875790565b60005b8381106101f05750506000910152565b81810151838201526020016101e0565b90602091610219815180928185528580860191016101dd565b601f01601f1916010190565b906020610236928181520190610200565b90565b903590601e1981360301821215610187570180359067ffffffffffffffff82116101875760200191813603831361018757565b908092918237016000815290565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176102b257604052565b61027a565b6102c46102369180610239565b9190610405610102846040519586947f3c7061746820643d224d3635392e343836203736382e363734433731322e333260208701527f38203739332e373632203837372e383334203738332e373237203931362e373160408701527f38203736382e363734433935352e363032203735332e363232203931362e373160608701527f38203830392e383138203931362e373138203830392e383138433832312e333760808701527f32203834302e363736203736352e353035203834332e343137203635392e343860a08701527f36203830392e383138433635392e343836203830392e383138203630362e363460c08701527f33203734332e353837203635392e343836203736382e3637345a222066696c6c60e0870152611e9160f11b61010087015283860137631110179f60e11b9084019190910190815260040190565b03601f198101835282610290565b90610426602092828151948592016101dd565b0190565b67ffffffffffffffff81116102b257601f01601f191660200190565b6020818303126101875780519067ffffffffffffffff8211610187570181601f820112156101875780516104798161042a565b926104876040519485610290565b818452602082840101116101875761023691602080850191016101dd565b916104ce906104c06102369593606086526060860190610200565b908482036020860152610200565b916040818403910152610200565b6040513d6000823e3d90fd5b604051906104f7602083610290565b60008252565b906105078261042a565b6105146040519182610290565b8281528092610525601f199161042a565b0190602036910137565b8060009172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610664575b806d04ee2d6d415b85acef8100000000600a921015610648575b662386f26fc10000811015610633575b6305f5e100811015610621575b612710811015610611575b6064811015610602575b10156105f7575b6105e260216105b6600185016104fd565b938401015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b600a82061a8353600a900490565b80156105f2576105e290916105bb565b505090565b6001909101906105a5565b6002906064900493019261059e565b6004906127109004930192610594565b6008906305f5e1009004930192610589565b601090662386f26fc10000900493019261057c565b6020906d04ee2d6d415b85acef8100000000900493019261056c565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610552565b610690906102b7565b6102366006608760405180947f3c7376672077696474683d223130302522206865696768743d2231303025222060208301527f76696577426f783d2230203020313435332031323734222066696c6c3d226e6f60408301527f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3230306060830152661817b9bb33911f60c91b608083015261073181518092602086860191016101dd565b8101651e17b9bb339f60d11b838201520301601919810184520182610290565b60405190610760606083610290565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b634e487b7160e01b600052601160045260246000fd5b90600282018092116107d657565b6107b2565b90602082018092116107d657565b600281901b91906001600160fe1b038116036107d657565b8051156108ec57610810610751565b61082c61082761082084516107c8565b6003900490565b6107e9565b9161083e610839846107db565b6104fd565b9283528091815182019060208501935b8281106108905750505060039051068060011461087f57600214610870575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b60036004919592939501916001603f845182828260121c168801015160f81b8452828282600c1c168801015160f81b8385015282828260061c168801015160f81b6002850152168501015160f81b60038201520193919061084e565b506102366104e856fea264697066735822122081467eb545e587267e2914bc20cab7237a0d98df92d29420c70ad926999eeeee64736f6c634300081c0033",
  "libraries": {
    "TokenURIGen": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}