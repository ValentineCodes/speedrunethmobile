{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "PRNG__InvalidRange",
      "type": "error"
    }
  ],
  "transactionHash": "0x16c8365d0c69bc143de2d6bd9326f2a9f79fa8e2810dfa12eb8ef4ca4fa57ce9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "621363",
    "logsBloom": "0x
    "blockHash": "0x866b311d11a5901ebc39992463c9be5901111bed3c13e6e6e522a9b081b98bc9",
    "transactionHash": "0x16c8365d0c69bc143de2d6bd9326f2a9f79fa8e2810dfa12eb8ef4ca4fa57ce9",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "621363",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f7c322bb55226d6d888297f97025c99b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"PRNG__InvalidRange\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/AttributesGen.sol\":\"AttributesGen\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/libraries/logic/AttributesGen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { DataTypes } from \\\"../types/DataTypes.sol\\\";\\nimport { ColorGen } from \\\"../utils/ColorGen.sol\\\";\\nimport { PRNG } from \\\"../utils/PRNG.sol\\\";\\n\\nlibrary AttributesGen {\\n    function generateAttributes(mapping(uint256 => DataTypes.Snowman) storage s_attributes, uint256 tokenId) external {\\n        DataTypes.Snowman memory snowman;\\n        string[2] memory colors;\\n\\n        // generate random cloud and button color\\n        for (uint256 i = 0; i < 2; i++) {\\n            colors[i] = ColorGen.HSLA(bytes32(i));\\n        }\\n\\n        snowman = DataTypes.Snowman({\\n            eyeOffsetX: int256(PRNG.range(0, 19, keccak256(\\\"1\\\"))) - 9, // range: -9 - 9\\n            eyeOffsetY: int256(PRNG.range(0, 19, keccak256(\\\"2\\\"))) - 9, // range: -9 - 9\\n            cloudColor: colors[0],\\n            buttonColor: colors[1],\\n            snowAnimOffsetX: int256(PRNG.range(0, 600)) - 300 // range: -300 - 300\\n        });\\n\\n        s_attributes[tokenId] = snowman;\\n    }\\n}\\n\",\"keccak256\":\"0x9ebc1afc004309ec69bc09dc18f8c42e04912ecf75db7c9b769d283d8b5e3068\",\"license\":\"MIT\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary DataTypes {\\n    enum AccessoryPosition {\\n        Foreground,\\n        Background\\n    }\\n\\n    struct Accessory {\\n        address _address;\\n        AccessoryPosition position;\\n    }\\n\\n    struct Snowman {\\n        int256 eyeOffsetX;\\n        int256 eyeOffsetY;\\n        string cloudColor;\\n        string buttonColor;\\n        int256 snowAnimOffsetX;\\n    }\\n\\n    struct Hat {\\n        string color;\\n    }\\n\\n    struct Scarf {\\n        string color;\\n    }\\n\\n    struct Belt {\\n        string color;\\n    }\\n}\\n\",\"keccak256\":\"0x11e380696413d78a10393614f32c19f4369f84a3fe0224dc21ac486df6635b9a\",\"license\":\"MIT\"},\"contracts/libraries/utils/ColorGen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { PRNG } from \\\"./PRNG.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary ColorGen {\\n    using PRNG for uint256;\\n    using Strings for uint256;\\n\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n    uint256 internal constant MIN_RGB_VALUE = 0;\\n    uint256 internal constant MAX_RGB_VALUE = 255;\\n    uint256 internal constant MIN_HSL_VALUE = 0;\\n    uint256 internal constant MAX_HSL_VALUE = 100;\\n    uint256 internal constant MIN_ALPHA = 3;\\n    uint256 internal constant MAX_ALPHA = 10;\\n\\n    function HEX() internal view returns (string memory) {\\n        bytes32 randHash = keccak256(abi.encodePacked(blockhash(block.number - 1), msg.sender, address(this)));\\n        bytes3 color = bytes2(randHash[0]) | (bytes2(randHash[1]) >> 8) | (bytes3(randHash[2]) >> 16);\\n        return _formatHEX(color);\\n    }\\n\\n    function HEX(bytes32 seed) internal view returns (string memory) {\\n        bytes32 randHash = keccak256(abi.encodePacked(seed, blockhash(block.number - 1), msg.sender, address(this)));\\n        bytes3 color = bytes2(randHash[0]) | (bytes2(randHash[1]) >> 8) | (bytes3(randHash[2]) >> 16);\\n        return _formatHEX(color);\\n    }\\n\\n    function RGB() internal view returns (string memory) {\\n        uint256[3] memory randNums;\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            randNums[i] = MIN_RGB_VALUE.range(MAX_RGB_VALUE, bytes32(i));\\n        }\\n\\n        string memory color = _formatRGB(randNums[0], randNums[1], randNums[2]);\\n        return color;\\n    }\\n\\n    function RGB(bytes32 seed) internal view returns (string memory) {\\n        uint256[3] memory randNums;\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            bytes32 _seed = bytes32(keccak256(abi.encodePacked(seed, i)));\\n            randNums[i] = MIN_RGB_VALUE.range(MAX_RGB_VALUE, _seed);\\n        }\\n\\n        string memory color = _formatRGB(randNums[0], randNums[1], randNums[2]);\\n        return color;\\n    }\\n\\n    function RGBA() internal view returns (string memory) {\\n        uint256[4] memory randNums;\\n\\n        //  rgb\\n        for (uint256 i = 0; i < 3; i++) {\\n            randNums[i] = MIN_RGB_VALUE.range(MAX_RGB_VALUE, bytes32(i));\\n        }\\n        //  alpha\\n        randNums[3] = MIN_ALPHA.range(MAX_ALPHA);\\n\\n        string memory color = _formatRGBA(randNums[0], randNums[1], randNums[2], randNums[3]);\\n        return color;\\n    }\\n\\n    function RGBA(bytes32 seed) internal view returns (string memory) {\\n        uint256[4] memory randNums;\\n\\n        //  rgb\\n        for (uint256 i = 0; i < 3; i++) {\\n            bytes32 _seed = bytes32(keccak256(abi.encodePacked(seed, i)));\\n            randNums[i] = MIN_RGB_VALUE.range(MAX_RGB_VALUE, _seed);\\n        }\\n        //  alpha\\n        randNums[3] = MIN_ALPHA.range(MAX_ALPHA, seed);\\n\\n        string memory color = _formatRGBA(randNums[0], randNums[1], randNums[2], randNums[3]);\\n        return color;\\n    }\\n\\n    function HSL() internal view returns (string memory) {\\n        uint256[3] memory randNums;\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            randNums[i] = MIN_HSL_VALUE.range(MAX_HSL_VALUE, bytes32(i));\\n        }\\n\\n        string memory color = _formatHSL(randNums[0], randNums[1], randNums[2]);\\n        return color;\\n    }\\n\\n    function HSL(bytes32 seed) internal view returns (string memory) {\\n        uint256[3] memory randNums;\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            bytes32 _seed = bytes32(keccak256(abi.encodePacked(seed, i)));\\n            randNums[i] = MIN_HSL_VALUE.range(MAX_HSL_VALUE, _seed);\\n        }\\n\\n        string memory color = _formatHSL(randNums[0], randNums[1], randNums[2]);\\n        return color;\\n    }\\n\\n    function HSLA() internal view returns (string memory) {\\n        uint256[4] memory randNums;\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            randNums[i] = MIN_HSL_VALUE.range(MAX_HSL_VALUE, bytes32(i));\\n        }\\n\\n        randNums[3] = MIN_ALPHA.range(MAX_ALPHA);\\n\\n        string memory color = _formatHSLA(randNums[0], randNums[1], randNums[2], randNums[3]);\\n        return color;\\n    }\\n\\n    function HSLA(bytes32 seed) internal view returns (string memory) {\\n        uint256[4] memory randNums;\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            bytes32 _seed = bytes32(keccak256(abi.encodePacked(seed, i)));\\n            randNums[i] = MIN_HSL_VALUE.range(MAX_HSL_VALUE, _seed);\\n        }\\n\\n        randNums[3] = MIN_ALPHA.range(MAX_ALPHA, seed);\\n\\n        string memory color = _formatHSLA(randNums[0], randNums[1], randNums[2], randNums[3]);\\n        return color;\\n    }\\n\\n    function _formatHEX(bytes3 value) private pure returns (string memory) {\\n        bytes memory buffer = new bytes(6);\\n        for (uint256 i = 0; i < 3; i++) {\\n            buffer[i * 2 + 1] = ALPHABET[uint8(value[i]) & 0xf];\\n            buffer[i * 2] = ALPHABET[uint8(value[i] >> 4) & 0xf];\\n        }\\n        return string(abi.encodePacked(\\\"#\\\", buffer));\\n    }\\n\\n    function _formatRGB(uint256 r, uint256 g, uint256 b) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"rgb(\\\", r.toString(), \\\", \\\", g.toString(), \\\", \\\", b.toString(), \\\")\\\"));\\n    }\\n\\n    function _formatRGBA(uint256 r, uint256 g, uint256 b, uint256 a) private pure returns (string memory) {\\n        if (a < MAX_ALPHA) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        \\\"rgba(\\\",\\n                        r.toString(),\\n                        \\\", \\\",\\n                        g.toString(),\\n                        \\\", \\\",\\n                        b.toString(),\\n                        \\\", 0.\\\",\\n                        a.toString(),\\n                        \\\")\\\"\\n                    )\\n                );\\n        } else {\\n            return string(abi.encodePacked(\\\"rgba(\\\", r.toString(), \\\", \\\", g.toString(), \\\", \\\", b.toString(), \\\", 1)\\\"));\\n        }\\n    }\\n\\n    function _formatHSL(uint256 h, uint256 s, uint256 l) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"hsl(\\\", h.toString(), \\\", \\\", s.toString(), \\\"%, \\\", l.toString(), \\\"%)\\\"));\\n    }\\n\\n    function _formatHSLA(uint256 h, uint256 s, uint256 l, uint256 a) private pure returns (string memory) {\\n        if (a < MAX_ALPHA) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        \\\"hsla(\\\",\\n                        h.toString(),\\n                        \\\", \\\",\\n                        s.toString(),\\n                        \\\"%, \\\",\\n                        l.toString(),\\n                        \\\"%, 0.\\\",\\n                        a.toString(),\\n                        \\\")\\\"\\n                    )\\n                );\\n        } else {\\n            return string(abi.encodePacked(\\\"hsla(\\\", h.toString(), \\\", \\\", s.toString(), \\\"%, \\\", l.toString(), \\\"%, 1)\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd68c8f0f3b887c577411145e2ee9467b78267019770a3582e74708001562d9de\",\"license\":\"MIT\"},\"contracts/libraries/utils/PRNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nerror PRNG__InvalidRange(uint256 min, uint256 max);\\n\\nlibrary PRNG {\\n    modifier isValidRange(uint256 min, uint256 max) {\\n        if (min >= max) revert PRNG__InvalidRange(min, max);\\n        _;\\n    }\\n\\n    function randomNumber() internal view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(abi.encodePacked(block.timestamp, blockhash(block.number - 1), msg.sender, address(this)))\\n            );\\n    }\\n\\n    function randomNumber(bytes32 seed) internal view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(seed, block.timestamp, blockhash(block.number - 1), msg.sender, address(this))\\n                )\\n            );\\n    }\\n\\n    function range(uint256 min, uint256 max) internal view isValidRange(min, max) returns (uint256) {\\n        uint256 exclusiveMax = (max - min) + 1;\\n        uint256 randNum = randomNumber() % exclusiveMax;\\n\\n        return randNum + min;\\n    }\\n\\n    function range(uint256 min, uint256 max, bytes32 seed) internal view isValidRange(min, max) returns (uint256) {\\n        uint256 exclusiveMax = (max - min) + 1;\\n        uint256 randNum = randomNumber(seed) % exclusiveMax;\\n\\n        return randNum + min;\\n    }\\n}\\n\",\"keccak256\":\"0x96509ec0a2beed0762ac0bedb1c1684b52534cac87255fd9074588e65c2b53a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234601b57610a46908161002182393081602f0152f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c63391b088d1461002a57600080fd5b8190307f00000000000000000000000000000000000000000000000000000000000000001461069d57604036600319011261069d578061006b6080926106a0565b82815282602082015260606040820152606080820152015260409081519061009383836106d2565b805b83811061068f57504360001981019081119290916008815b6002811061051a5750508061050657506000926104f257835160208101907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc682524286820152834060608201523360601b60808201523060601b60948201526088815261011b60a8826106d2565b519020601461012a910661071b565b9250600090845160208101907fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a582524287820152844060608201523360601b60808201523060601b60948201526088815261018660a8826106d2565b5190206014610195910661071b565b926020825192015192508551602081019142835240878201523360601b60608201523060601b6074820152606881526101cf6088826106d2565b51902061025990069260009561012b1985019485136001166104de578051956101f7876106a0565b8652602086019182528086019283526060860193845260808601948552602435875260043560205286209451855551600185015560028401905180519067ffffffffffffffff82116104ca578254600181811c911680156104c0575b60208210146104ac579081601f84931161045c575b50602090601f83116001146103f95788926103ee575b50508160011b916000199060031b1c19161790555b518051600384019167ffffffffffffffff82116103da578254600181811c911680156103d0575b60208210146103bc57601f8111610377575b50602090601f831160011461031057600494939291879183610305575b50508160011b916000199060031b1c19161790555b5191015580f35b0151905038806102e9565b8387528187209190601f198416885b81811061035f575091600193918560049897969410610346575b505050811b0190556102fe565b015160001960f88460031b161c19169055388080610339565b9293602060018192878601518155019501930161031f565b83875260208720601f840160051c810191602085106103b2575b601f0160051c01905b8181106103a757506102cc565b87815560010161039a565b9091508190610391565b634e487b7160e01b87526022600452602487fd5b90607f16906102ba565b634e487b7160e01b86526041600452602486fd5b01519050388061027e565b8489528189209250601f198416895b818110610444575090846001959493921061042b575b505050811b019055610293565b015160001960f88460031b161c1916905538808061041e565b92936020600181928786015181550195019301610408565b90915083885260208820601f840160051c810191602085106104a2575b90601f859493920160051c01905b8181106104945750610268565b898155849350600101610487565b9091508190610479565b634e487b7160e01b88526022600452602488fd5b90607f1690610253565b634e487b7160e01b87526041600452602487fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b81526011600452602490fd5b9091608087519161052b82846106d2565b81368437805b600381106105e25750806105065750600093929190876105ce5788516020810191848352428b830152884060608301523360601b908201523060601b60948201526088815261058160a8826106d2565b519020839006600381018091116105ce576060820181905281516020830151928a0151600194936105b2939261076e565b6105bc82876106f4565b526105c781866106f4565b50016100ad565b634e487b7160e01b85526011600452602485fd5b9089979395949896995160208101908a8252838a8201528981526106076060826106d2565b5190209080610506575060009190876104f257885160208101918252428a820152854060608201523360601b858201523060601b60948201526088815261064f60a8826106d2565b519020606590066000600483101561067b5750906001918160051b880152019895979394929698610531565b634e487b7160e01b81526032600452602490fd5b606083820152602001610095565b50fd5b60a0810190811067ffffffffffffffff8211176106bc57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176106bc57604052565b9060028110156107055760051b0190565b634e487b7160e01b600052603260045260246000fd5b90600819820191821360011661072d57565b634e487b7160e01b600052601160045260246000fd5b9081519160005b83811061075b575050016000815290565b806020809284010151818501520161074a565b92909190600a811015610822579161080960019260056107f761081f9660036107e76107b76107b16107ab6107a56107d89e6108a1565b9a6108a1565b976108a1565b936108a1565b9560026040519c8d9a640d0e6d8c2560db1b60208d015260258c0190610743565b61016160f51b81520190610743565b6201296160ed1b81520190610743565b64129610181760d91b81520190610743565b602960f81b815203601e198101845201826106d2565b90565b5061081f9161086b60059260036107e761084a6107b16108446107d89a6108a1565b966108a1565b926002604051998a97640d0e6d8c2560db1b60208a01526025890190610743565b64252c20312960d81b815203601a198101845201826106d2565b67ffffffffffffffff81116106bc57601f01601f191660200190565b8060009172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156109ed575b806d04ee2d6d415b85acef8100000000600a9210156109d2575b662386f26fc100008110156109be575b6305f5e1008110156109ad575b61271081101561099e575b6064811015610990575b1015610985575b600a6021600184019361092985610885565b9461093760405196876106d2565b808652610946601f1991610885565b013660208701378401015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561098057600a9091610951565b505090565b600190910190610917565b606460029104930192610910565b61271060049104930192610906565b6305f5e100600891049301926108fb565b662386f26fc10000601091049301926108ee565b6d04ee2d6d415b85acef8100000000602091049301926108de565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b81046108c456fea2646970667358221220475500eb714bb4d0acef3662f5de9713855335489eeb28fc5dc0800c0257210064736f6c634300081c0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c63391b088d1461002a57600080fd5b8190307f00000000000000000000000000000000000000000000000000000000000000001461069d57604036600319011261069d578061006b6080926106a0565b82815282602082015260606040820152606080820152015260409081519061009383836106d2565b805b83811061068f57504360001981019081119290916008815b6002811061051a5750508061050657506000926104f257835160208101907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc682524286820152834060608201523360601b60808201523060601b60948201526088815261011b60a8826106d2565b519020601461012a910661071b565b9250600090845160208101907fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a582524287820152844060608201523360601b60808201523060601b60948201526088815261018660a8826106d2565b5190206014610195910661071b565b926020825192015192508551602081019142835240878201523360601b60608201523060601b6074820152606881526101cf6088826106d2565b51902061025990069260009561012b1985019485136001166104de578051956101f7876106a0565b8652602086019182528086019283526060860193845260808601948552602435875260043560205286209451855551600185015560028401905180519067ffffffffffffffff82116104ca578254600181811c911680156104c0575b60208210146104ac579081601f84931161045c575b50602090601f83116001146103f95788926103ee575b50508160011b916000199060031b1c19161790555b518051600384019167ffffffffffffffff82116103da578254600181811c911680156103d0575b60208210146103bc57601f8111610377575b50602090601f831160011461031057600494939291879183610305575b50508160011b916000199060031b1c19161790555b5191015580f35b0151905038806102e9565b8387528187209190601f198416885b81811061035f575091600193918560049897969410610346575b505050811b0190556102fe565b015160001960f88460031b161c19169055388080610339565b9293602060018192878601518155019501930161031f565b83875260208720601f840160051c810191602085106103b2575b601f0160051c01905b8181106103a757506102cc565b87815560010161039a565b9091508190610391565b634e487b7160e01b87526022600452602487fd5b90607f16906102ba565b634e487b7160e01b86526041600452602486fd5b01519050388061027e565b8489528189209250601f198416895b818110610444575090846001959493921061042b575b505050811b019055610293565b015160001960f88460031b161c1916905538808061041e565b92936020600181928786015181550195019301610408565b90915083885260208820601f840160051c810191602085106104a2575b90601f859493920160051c01905b8181106104945750610268565b898155849350600101610487565b9091508190610479565b634e487b7160e01b88526022600452602488fd5b90607f1690610253565b634e487b7160e01b87526041600452602487fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b81526011600452602490fd5b9091608087519161052b82846106d2565b81368437805b600381106105e25750806105065750600093929190876105ce5788516020810191848352428b830152884060608301523360601b908201523060601b60948201526088815261058160a8826106d2565b519020839006600381018091116105ce576060820181905281516020830151928a0151600194936105b2939261076e565b6105bc82876106f4565b526105c781866106f4565b50016100ad565b634e487b7160e01b85526011600452602485fd5b9089979395949896995160208101908a8252838a8201528981526106076060826106d2565b5190209080610506575060009190876104f257885160208101918252428a820152854060608201523360601b858201523060601b60948201526088815261064f60a8826106d2565b519020606590066000600483101561067b5750906001918160051b880152019895979394929698610531565b634e487b7160e01b81526032600452602490fd5b606083820152602001610095565b50fd5b60a0810190811067ffffffffffffffff8211176106bc57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176106bc57604052565b9060028110156107055760051b0190565b634e487b7160e01b600052603260045260246000fd5b90600819820191821360011661072d57565b634e487b7160e01b600052601160045260246000fd5b9081519160005b83811061075b575050016000815290565b806020809284010151818501520161074a565b92909190600a811015610822579161080960019260056107f761081f9660036107e76107b76107b16107ab6107a56107d89e6108a1565b9a6108a1565b976108a1565b936108a1565b9560026040519c8d9a640d0e6d8c2560db1b60208d015260258c0190610743565b61016160f51b81520190610743565b6201296160ed1b81520190610743565b64129610181760d91b81520190610743565b602960f81b815203601e198101845201826106d2565b90565b5061081f9161086b60059260036107e761084a6107b16108446107d89a6108a1565b966108a1565b926002604051998a97640d0e6d8c2560db1b60208a01526025890190610743565b64252c20312960d81b815203601a198101845201826106d2565b67ffffffffffffffff81116106bc57601f01601f191660200190565b8060009172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156109ed575b806d04ee2d6d415b85acef8100000000600a9210156109d2575b662386f26fc100008110156109be575b6305f5e1008110156109ad575b61271081101561099e575b6064811015610990575b1015610985575b600a6021600184019361092985610885565b9461093760405196876106d2565b808652610946601f1991610885565b013660208701378401015b60001901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561098057600a9091610951565b505090565b600190910190610917565b606460029104930192610910565b61271060049104930192610906565b6305f5e100600891049301926108fb565b662386f26fc10000601091049301926108ee565b6d04ee2d6d415b85acef8100000000602091049301926108de565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b81046108c456fea2646970667358221220475500eb714bb4d0acef3662f5de9713855335489eeb28fc5dc0800c0257210064736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}